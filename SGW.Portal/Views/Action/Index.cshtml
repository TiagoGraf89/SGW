@model SGW.Portal.Models.ActionModel
@{
    ViewBag.Title = "Etapa Manual";
}


<hgroup class="title">
    <h1>@ViewBag.Title.</h1>
</hgroup>

<section id="actionForm">
<h2>Sistema Gerenciador de Workflows</h2>
@using (Html.BeginForm("Index", "Action", FormMethod.Post, new { @enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Etapa Manual</legend>
        <ol>
            <li class="fullline">
                @Html.LabelFor(m => m.UserDefinedId)
                @Html.ActionLink(Model.UserDefinedId, "EntityInstance", "Action", new { entityInstanceId = Model.EntityInstanceId }, null)
            </li>
            <li>
                @Html.LabelFor(m => m.Entity)
                @Html.TextBoxFor(m => m.Entity, new { @readonly = "true", @class = "readonly" })
            </li>
            <li>
                @Html.LabelFor(m => m.Step)
                @Html.TextBoxFor(m => m.Step, new { @readonly = "true", @class = "readonly" })
            </li>
            <li>
                @Html.LabelFor(m => m.Assignee)
                @Html.TextBoxFor(m => m.Assignee, new { @readonly = "true", @class = "readonly" })
            </li>
            <li class="fullline">
                @Html.LabelFor(m => m.Description)
                @Html.TextAreaFor(m => m.Description, new { @readonly = "true", @class = "readonly" })
            </li>
            @if (Model.ActionType == SGW.Portal.Models.ActionType.Upload)
            {
            <li class="fullline">
                <label>Anexar Arquivo</label>
                <input type="file" name="file" id="file" style="width:500px;" />
            </li>
            }
            else
            {
            <li class="fullline">
                @Html.LabelFor(m => m.Result)
                @Html.DropDownListFor(m => m.Result, new SelectList(Model.Results, "Code", "Description"), "Selecione")
                @Html.ValidationMessageFor(m => m.Result)
            </li>
            }
            <li class="fullline">
                @Html.HiddenFor(m => m.UserDefinedId)
                @Html.HiddenFor(m => m.EntityInstanceId)
                @Html.HiddenFor(m => m.ActionType)
                @Html.HiddenFor(m => m.StepId)
                @Html.HiddenFor(m => m.WorkflowStepInstanceId)
                <input type="submit" value="Salvar" />
            </li>
        </ol>
        
    </fieldset>

}

<h3>Workflow da Etapa</h3>
    <div id="workflowContent" class="workflowContent">
        @foreach (var item in Model.Steps)
        {
            string image = item.StepType.StepCommand + "Step.png";
                
            <div id="Button_@item.Id.ToString()" 
                style="width:auto; 
                        position:absolute;
                        height:auto;
                        z-index:1; 
                        align-content:center;
                        text-align:center;
                        cursor:pointer;"
                 
                title="@item.Description" >
               <img src="~/Images/@image" style="cursor:pointer;" />
                <label id="lblCalcDesc_@item.Id.ToString()">@item.Description</label>
            </div>
        }
           <canvas id="drawing">
               </canvas>
    </div>

    <script>

        /* lines with arrows code */
        var arrow = [
        [2, 0],
        [-10, -4],
        [-10, 4]
        ];

        function drawFilledPolygon(shape) {
            ctx.beginPath();
            ctx.moveTo(shape[0][0], shape[0][1]);

            for (p in shape)
                if (p > 0) ctx.lineTo(shape[p][0], shape[p][1]);

            ctx.lineTo(shape[0][0], shape[0][1]);
            ctx.fill();
        };

        function translateShape(shape, x, y) {
            var rv = [];
            for (p in shape)
                rv.push([shape[p][0] + x, shape[p][1] + y]);
            return rv;
        };

        function rotateShape(shape, ang) {
            var rv = [];
            for (p in shape)
                rv.push(rotatePoint(ang, shape[p][0], shape[p][1]));
            return rv;
        };
        function rotatePoint(ang, x, y) {
            return [
                (x * Math.cos(ang)) - (y * Math.sin(ang)),
                (x * Math.sin(ang)) + (y * Math.cos(ang))
            ];
        };

        function drawLineTransition(from, target) {
            var pf = $(from).offset();
            var pt = $(target).offset();
            drawLineArrow(pf.left - canvas.parentElement.offsetLeft, pf.top - canvas.parentElement.offsetTop, pt.left - canvas.parentElement.offsetLeft, pt.top - canvas.parentElement.offsetTop, 30);
        }

        function drawLineArrow(x1, y1, x2, y2, increment) {
            ctx.beginPath();
            ctx.lineWidth = 1;

            x1 += increment / 2;
            y1 += increment / 2;

            if (x1 > x2)
                x2 += increment;

            if (y1 > y2)
                y2 += increment;



            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.stroke();
            var ang = Math.atan2(y2 - y1, x2 - x1);
            drawFilledPolygon(translateShape(rotateShape(arrow, ang), x2, y2));
        };

        var canvas, ctx;

        function initArrows() {
            canvas = document.getElementById('drawing');
            canvas.width = canvas.parentElement.offsetWidth;
            canvas.height = canvas.parentElement.offsetHeight;
            ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.offsetWidth, canvas.offsetHeight);
        };

        initArrows();

        pos = $('#workflowContent').offset();

        @{

            int left = 100;
            int top = Model.Steps.Count() * 100 / 2;
            foreach (var item in Model.Steps)
            {

                if (!item.Equals(Model.Steps.ElementAt(0)))
                {
                <text>
                    $('#Button_@item.Id.ToString()').css({ "left": @left + pos.left, "top": @top + pos.top});
                    drawLineTransition($('#Button_@Model.Steps.ElementAt(0).Id.ToString() img')[0], $('#Button_@item.Id.ToString() img')[0]);
                </text>
                    top += 100;
                }
                else
                {
                @:$('#Button_@item.Id.ToString()').css({ "left": @left + pos.left, "top": @top + pos.top });
                left += 300;
                top = 50;
            }
            
        }
        
        }
    </script>

</section>
